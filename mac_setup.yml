---
- name: Build localhost
  hosts: localhost
  connection: local

  vars:
    upgrade_homebrew_packages: true

  tasks:
    - name: Check if Homebrew is already installed in /usr
      stat:
        path: /usr/local/bin/brew
      register: homebrew_local
      tags:
        - brew
        - brew-bundle

    - name: Check if Homebrew is already installed /opt
      stat:
        path: /opt/homebrew/bin/brew
      register: homebrew_opt
      tags:
        - brew

    - fail:
        msg: Please perform the pre-req's in the README.md
      when: not homebrew_local.stat.exists and not homebrew_opt.stat.exists
      tags:
        - brew

    - name: Install brew bundles
      command: "brew bundle --file BrewFile -q "
      when: homebrew_local.stat.exists or homebrew_opt.stat.exists
      tags:
        - brew-bundle

    - name: check if prezto is setup
      stat: path=$HOME/.zprezto
      register: prezto
      tags:
        - prezto

    - name: Clone prezto
      git:
        repo: "https://github.com/sorin-ionescu/prezto.git"
        dest: "$HOME/.zprezto"
      when: not prezto.stat.exists
      tags:
        - prezto

    - name: check if zgen is setup
      stat: path=$HOME/.zgen/zgen.zsh
      register: zgen
      tags:
        - zgen

    - name: Clone zgen
      git:
        repo: "https://github.com/tarjoilija/zgen.git"
        dest: "$HOME/.zgen"
      when: not zgen.stat.exists
      tags:
        - zge

    # - name: Install prezto theme from git.
    #   git:
    #     repo: "https://github.com/bhilburn/powerlevel9k.git"
    #     dest: "{{ ansible_env.HOME}}/.zprezto/modules/prompt/external/powerlevel9k"
    #     force: true

    # - name: Link prezto theme.
    #   file:
    #     src: "{{ ansible_env.HOME}}/.zprezto/modules/prompt/external/powerlevel9k/powerlevel9k.zsh-theme"
    #     dest: "{{ ansible_env.HOME}}/.zprezto/modules/prompt/functions/prompt_powerlevel9k_setup"
    #     state: link

    # - name: check if dotfiles are setup
    #   stat: path=$HOME/.myconf
    #   register: myconf
    #   tags:
    #     - dotfiles

    # - name: check if powerline fonts is setup
    #   stat: path="{{ ansible_env.HOME }}/Library/Fonts/Go Mono Bold for Powerline.ttf"
    #   register: powerline
    #   tags:
    #     - powerline

    # - name: Clone powerline
    #   git:
    #     repo: "https://github.com/powerline/fonts.git"
    #     dest: "{{ ansible_env.HOME }}/fonts"
    #     depth: 1
    #   register: fonts
    #   when: not powerline.stat.exists
    #   tags:
    #     - powerline

    # Not working...∫
    # - name: install fonts
    #   command: "./install.sh"
    #   args:
    #     chdir: "{{ ansible_env.HOME }}/fonts"
    #   register: clean_fonts
    #   when: fonts is defined and not powerline.stat.exists
    #   tags:
    #     - powerline

    # - name: clean fonts
    #   file:
    #     state: absent
    #     path: "{{ ansible_env.HOME }}/fonts"
    #   when: clean_fonts is defined and  powerline.stat.exists
    #   tags:
    #     - powerline

    # - name: Setup dotfiles
    #   git:
    #     repo: "git@github.com:harbinger55/myconf.git"
    #     separate_git_dir: "$HOME/.myconf"
    #     dest: $HOME/myconf-tmp
    #   register: myconf_cloned
    #   when: not myconf.stat.exists
    #   tags:
    #     - dotfiles

    # - name: sync dotfiles
    #   synchronize:
    #     src: ~/myconf-tmp/
    #     dest: ~/
    #     recursive: yes
    #     rsync_opts:
    #       - "--exclude=.git"
    #   when: myconf_cloned is defined
    #   tags:
    #     - dotfiles

    - name: include VSCODE extentions vars
      include_vars:
        file: vscode_extension_ids.yml
      tags:
        - vscode

    - name: Install VSCode extentions
      command: "code --install-extension {{ item }}"
      with_items:
        - "{{ vscode_ext }}"
      tags:
        - vscode

    - name: Set zsh as default shell
      become: false
      user:
        name: "{{ ansible_user_id }}"
        shell: /bin/zsh


    - name: include Login Packages vars
      include_vars:
        file: login_packages.yml
      tags:
        - login

    - name: Setup Apps to start at login
      shell: loginItems -a "{{ item }}"
      with_items:
        - "{{ login_packages }}"
      tags:
        - login

    - name: Set 24 hour time
      osx_defaults:
        domain: com.apple.menuextra.clock
        key: DateFormat
        type: string
        value: "EEE HH:mm:ss"
      register: restartSystemUIServer
      tags:
        - clock

    - name: restart SystemUIServer
      command: killall SystemUIServer
      when: restartSystemUIServer is defined
      tags:
        - clock
